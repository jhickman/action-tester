name: Static Analysis

on:
  pull_request

jobs:
  tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    env:
      PGDB: actiontest
      PGPASSWORD: pass1234
      PGUSER: the_user
      DB_DUMP: test_database_dump.sql

    services:
      postgres:
        image: postgis/postgis:15-master
        env:
          POSTGRES_DB: ${{ env.PGDB }}
          POSTGRES_PASSWORD: ${{ env.PGPASSWORD }}
          POSTGRES_USER: ${{ env.PGUSER }}
        ports:
          - "5432:5432"

    steps:
      - uses: actions/checkout@v4
      - id: db_cache_key
        run: |
          echo "service_container=$(docker ps --filter "ancestor=postgis/postgis:15-master" --format "{{.Names}}")" >> $GITHUB_OUTPUT
          echo "dbkey=test_database_${{ runner.os }}-${{ hashFiles('**/migrations/*.py') }}" >> $GITHUB_OUTPUT
      - name: Test PostgreSQL Connection
        run: |
          CONTAINER_NAME=${{ steps.db_cache_key.outputs.service_container }}
          docker exec $CONTAINER_NAME \
              psql -U ${{ env.PGUSER }} -l
      - uses: actions/cache/restore@v4
        id: restore_cache
        with:
          path: ${{ env.DB_DUMP }}
          key: ${{ steps.db_cache_key.outputs.dbkey }}
      - name: Restore Database
        if: steps.restore_cache.outputs.cache-hit == 'true'
        run: |
          echo Restoring Database from backup
          CONTAINER_NAME=${{ steps.db_cache_key.outputs.service_container }}
          echo 'copying dump file to postgres container'
          docker cp ${{env.DB_DUMP}} "$CONTAINER_NAME":/tmp
          echo 'creating database test_${{env.PGDB }}'
          docker exec $CONTAINER_NAME \
            psql -U ${{ env.PGUSER }} -d ${{ env.PGDB }} -c "create DATABASE test_${{ env.PGDB }};"
          docker exec $CONTAINER_NAME \
            psql -U ${{ env.PGUSER }} -d test_${{ env.PGDB }} -f /tmp/${{ env.DB_DUMP }}
      - name: Install Dependencies
        run: |
          # install needed libraries into container
          sudo apt update
          sudo apt install -y gdal-bin
      - name: Set up python
        uses: actions/setup-python@v4
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.11.6'
          # Optional - x64 or x86 architecture, defaults to x64
          architecture: 'x64'
          cache: 'pip' # caching pip dependencies
      - run: pip install -r requirements.txt
      - name: Run Tests
        env:
          ENV: testing
        run: |
          python -m pytest -v
      - name: Create backup
        run: |
          CONTAINER_NAME=${{ steps.db_cache_key.outputs.service_container }}
          docker exec $CONTAINER_NAME \
              pg_dump -U ${{ env.PGUSER }} -d test_${{ env.PGDB }} > ${{ env.DB_DUMP }}

      - uses: actions/cache/save@v4
        id: save_cache
        with:
          path: ${{ env.DB_DUMP }}
          key: ${{ steps.db_cache_key.outputs.dbkey }}

